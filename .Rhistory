}
Experiment = function(N,n_values,){
X_mean = mean(n_values)
smallScenario = Experiment(30,n_values)
print(smallScenario)
ExperimentResult = data.frame (
sample(n) = n_values,
q()
Experiment = function(N, n_values, repetitions = 5){
ExperimentResult = data.frame(
sample_size = n_values,
Estimation1 = I(vector("list", length(n_values))),  # Use lists to store multiple repetitions
Estimation2 = I(vector("list", length(n_values))),
Estimation3 = I(vector("list", length(n_values)))
)
#Itterate for 5 times
for (n in n_values){
#Store the estimations
N1_reps = numeric(repetitions)
N2_reps = numeric(repetitions)
N3_reps = numeric(repetitions)
for (i in repetitions){
#generate the result of the draws, size nrOF draws, results range from 1 to N
#And stores them in the vector drawResult
drawResult = sample(1:N, size = n, replace = FALSE, prob = NULL)
#Runs estimations using the drawResult and stores them in respecitve N_x container
N1_reps[i] = firstEstimator(drawResult)
N2_reps[i] = secondEstimator(drawResult)
N3_reps[i] = thirdEstimator(drawResult)
}
#Here they have run 5 estimation for each n-draw add this result to the
#ExperimentResult dataframe
# Find the row index that matches the current sample size
row_index = which(ExperimentResult$sample_size == n)
ExperimentResult[row_index, "Estimation1"][1] = N1_reps # Add results to Estimation1
ExperimentResult[row_index, "Estimation2"][1] = N2_reps
ExperimentResult[row_index, "Estimation3"][1] = N3_reps
}
return (ExperimentResult)
}
print(smallScenario)
warnings()
ls
ExperimentResult$Estimation2[[row_index]] = N2_reps
#Runs estimations using the drawResult and stores them in respecitve N_x container
N1_reps[i] = firstEstimator(drawResult)
Experiment = function(N, n_values, repetitions = 5){
ExperimentResult = data.frame(
sample_size = n_values,
Estimation1 = I(vector("list", length(n_values))),  # Use lists to store multiple repetitions
Estimation2 = I(vector("list", length(n_values))),
Estimation3 = I(vector("list", length(n_values)))
)
#Itterate for 5 times
for (n in n_values){
#Store the estimations
N1_reps = numeric(repetitions)
N2_reps = numeric(repetitions)
N3_reps = numeric(repetitions)
for (i in 1:repetitions){
#generate the result of the draws, size nrOF draws, results range from 1 to N
#And stores them in the vector drawResult
drawResult = sample(1:N, size = n, replace = TRUE, prob = NULL)
#Runs estimations using the drawResult and stores them in respecitve N_x container
N1_reps[i] = firstEstimator(drawResult)
N2_reps[i] = secondEstimator(drawResult)
N3_reps[i] = thirdEstimator(drawResult)
}
#Here they have run 5 estimation for each n-draw add this result to the
#ExperimentResult dataframe
# Find the row index that matches the current sample size
row_index = which(ExperimentResult$sample_size == n)
# Adds the avreage estimation for this n to results and rounds them to 5 digits, places it in the column for the current n
ExperimentResult$Estimation1[[row_index]] = round(mean(N1_reps), digits = 5)
ExperimentResult$Estimation2[[row_index]] = round(mean(N2_reps), digits = 5)
ExperimentResult$Estimation3[[row_index]] = round(mean(N3_reps), digits = 5)
}
return (ExperimentResult)
}
